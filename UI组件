DropShadow shadow = new DropShadow();
shadow.setOffsetX(2); //设置图形边缘阴影的横向距离
shadow.setOffsetY(2); //设置图形边缘阴影的纵向距离

VBox vb = new VBox()；
vb.setLayoutX(5); //设置VBox距离Scene左边缘的横向距离；

ScrollBar sc = new ScrollBar();
sc.setLayoutX(5); //设置scrollBar距离Scene左边缘的横向距离

滚动面板
在设计UI界面时，你可能会需要改变滚动面板内部组件的大小，以使其能适应滚动面板的宽和高。
可以通过使用setFitToWidth或setFitToHeight方法将对应属性设置为true来在对应维度上适应大小变化。
在默认情况下，FIT_TO_WIDHT和FIT_TO_HEIGHT属性值都是false，并且所有的内容均会保持其初始大小。
如果从代码中移除了对setFitToWidth方法的调用，那么将会看到如图11-4的效果。

final ScrollPane sp = new ScrollPane();
final VBox vb = new VBox();
box.getChildren().addAll(sp, fileName);
VBox.setVgrow(sp, Priority.ALWAYS);//当调整VBox的纵向高度时，给其中的某个孩子分配额外空间，如果多个孩子配置了相同的优先级，则调高多出来的空间
在多个孩子上平均分配；如果都没有配置优先级，则VBox在调高时不会给任何一个孩子分配空间。

final ImageView[] pics = new ImageView[5];
pics[i].setFitWidth(100);  //The width of the bounding box within which the source image is resized as necessary to fit. If set to a value <= 0, 
then the intrinsic width of the image will be used as the fitWidth.
pics[i].setPreserveRatio(true);
/*
Property Description:
Indicates whether to preserve the aspect ratio of the source image when scaling to fit the image within the fitting bounding box.
If set to true, it affects the dimensions of this ImageView in the following way *

If only fitWidth is set, height is scaled to preserve ratio
If only fitHeight is set, width is scaled to preserve ratio
If both are set, they both may be scaled to get the best fit in a width by height rectangle while preserving the original aspect ratio
If unset or set to false, it affects the dimensions of this ImageView in the following way *
If only fitWidth is set, image's view width is scaled to match and height is unchanged;
If only fitHeight is set, image's view height is scaled to match and height is unchanged;
If both are set, the image view is scaled to match both.
Note that the dimensions of this node as reported by the node's bounds will be equal to the size of the scaled image and 
is guaranteed to be contained within fitWidth x fitHeight bonding box.
@defaultValue
false
*/

$List View
你可以通过SelectionModel和FocusModel类来随时跟踪ListView对象中被选择和获得焦点的选项。为了取得各个列表项的当前状态，可以通过使用下面的方法组合：

    · getSelectionModel().getSelectedIndex()

        –返回在单选（single-selection）模式下当前被选中的列表项索引号。

    · getSelectionModel().getSelectedItem()

        – 返回当前被选中的列表项。

    · getFocusModel().getFocusedIndex()

        –返回当前获得焦点的列表项索引号。

    · getFocusModel().getFocusedItem()

        –返回当前获得焦点的列表项。

在实例化ListView时默认使用的SelectionModel是MultiSelectionModel抽象类的一个实现。
不过selectionMode属性的默认值是SelectionMode.SINGLE。对于默认的ListView实例，如果要启用多选，则可以使用下面的样例代码：
listView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
同时要注意MultipleSelectionModel具有selectedItems和selectedIndices属性，它们都是可观察的列表（observable list），可以被监听以检测多选情况。

$Method updateItem()
The updateItem method should not be called by developers, but it is the best method for developers to override to allow for them 
to customise the visuals of the cell. To clarify, developers should never call this method in their code 
(they should leave it up to the UI control, such as the javafx.scene.control.ListView control) to call this method. However, 
the purpose of having the updateItem method is so that developers, when specifying custom cell factories (again, like the ListView 
cell factory), the updateItem method can be overridden to allow for complete customisation of the cell.

It is very important that subclasses of Cell override the updateItem method properly, as failure to do so will lead to issues such as 
blank cells or cells with unexpected content appearing within them. Here is an example of how to properly override the updateItem method:

 protected void updateItem(T item, boolean empty) {
     super.updateItem(item, empty);

     if (empty || item == null) {
         setText(null);
         setGraphic(null);
     } else {
         setText(item.toString());
     }
 }
 
Note in this code sample two important points:

We call the super.updateItem(T, boolean) method. If this is not done, the item and empty properties are not correctly set, and you are 
likely to end up with graphical issues.We test for the empty condition, and if true, we set the text and graphic properties to null. 
If we do not do this, it is almost guaranteed that end users will see graphical artifacts in cells unexpectedly.
Overrides: updateItem(...) in Cell
Parameters:
item The new item for the cell.
empty whether or not this cell represents data from the list. If it is empty, then it does not represent any domain data, but is a cell 
being used to render an "empty" row.

$TableView
在JavaFX SDK API中有类被设计用于以表格形式展现数据的类。其中最重要的类是TableView、TableColumn和TableCell。你可以通过实现数据模型（data model）以及
提供单元格工厂（cell factory）来来填充表格。表格相关类内置提供了对表格列数据排序、自动调整列宽功能。
setCellValueFactory方法为每列指定了一个单元格工厂（cell factory），这些cell factory是通过PropertyValueFactory类来实现的，它将Person类中对应的属性
映射到对应的表格列中。
当数据模型被定义完毕，并且数据被关联到列之后，你可以通过TableView类的setItems方法来向表格中添加数据：如：table.setItems(data)。
由于ObservableList对象具有自动追踪其包含元素的改变的功能，所以TableView的内容将会在数据改变时自动更新。

$TreeView
树型结构可以包含带有各种不同类型数据的节点。使用带有泛型的TreeItem构造方法可以定义展现特定类型数据的树：TreeItem<T> (T value)。
T类型的value可以指定任何对象，例如UI控件或者自定义组件等。

与TreeView类不同，TreeItem类不是继承自Node类。因此，你不能对树节点增加视觉特效或者菜单。使用Cell Factory机制可以克服这个障碍，并根据你的应用程序
所需来自定义树节点的行为。

$关于setCellFactory函数的几种用法
有四种UI控件的外观和事件行为可以通过Cell Factory机制来完全自定义。你可以对TableView、ListView、TreeView和ComboBox这四种控件应用Cell Factory。
Cell Factory用于产生单元格（Cell）实例，它用于表示这些控件中的某一项。
Cell类由Labeled类扩展而来，它提供了所有实现最常见的应用场景——展示并编辑文本——所需要的属性和方法。然而，当你的应用程序的任务需要在列表或表格中展示图像
时，你可以使用graphic属性并且将任何Node放到Cell之中（参考Cell类的API规范来了解关于自定义Cell所需的更多信息）。
1）
final TreeView tree = new TreeView(rootItem);  
tree.setCellFactory(CheckBoxTreeCell.<String>forTreeView()); 
2）
treeView.setCellFactory((TreeView<String> p) -> new TextFieldTreeCellImpl());
private final class TextFieldTreeCellImpl extends TreeCell<String> {}
3）
TableColumn<Person, String> emailCol = new TableColumn<>("Email");
emailCol.setCellFactory(TextFieldTableCell.<Person>forTableColumn());       
4）
Callback<TableColumn<Person, String>, TableCell<Person, String>> cellFactory
    = (TableColumn<Person, String> p) -> new EditingCell();
TableColumn<Person, String> firstNameCol = new TableColumn<>("First Name");
firstNameCol.setCellFactory(cellFactory);
class EditingCell extends TableCell<Person, String> {}
   
5)
Callback<TableColumn<Map, String>, TableCell<Map, String>>cellFactoryForMap 
    = (TableColumn<Map, String> p) ->new TextFieldTableCell(new StringConverter() {   
TableColumn<Map, String> firstDataColumn = new TableColumn<>("Class A");
firstDataColumn.setCellFactory(cellFactoryForMap);

6)(此处的代码最能代表Callback函数泛型接口的用法)
final ComboBox priorityComboBox = new ComboBox();
riorityComboBox.setCellFactory(
            new Callback<ListView<String>, ListCell<String>>() {
                @Override public ListCell<String> call(ListView<String> param) {
                    final ListCell<String> cell = new ListCell<String>() {
                        {
                            super.setPrefWidth(100);
                        }    
                        @Override public void updateItem(String item, 
                            boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null) {
                                    setText(item);    
                                    if (item.contains("High")) {
                                        setTextFill(Color.RED);
                                    }
                                    else if (item.contains("Low")){
                                        setTextFill(Color.GREEN);
                                    }
                                    else {
                                        setTextFill(Color.BLACK);
                                    }
                                }
                                else {
                                    setText(null);
                                }
                            }
                };
                return cell;
            }
        });

$关于setCellValueFactory函数的几种用法
1）
TableColumn<Person, String> firstNameCol = new TableColumn<>("First Name");
firstNameCol.setCellValueFactory(new PropertyValueFactory<>("firstName"));

2）
public static final String Column1MapKey = "A";
TableColumn<Map, String> firstDataColumn = new TableColumn<>("Class A");
firstDataColumn.setCellValueFactory(new MapValueFactory(Column1MapKey));

$separator
在JavaFXAPI中，Separator类表示了一个横向或纵向的分隔线。它用于对应用程序用户界面元素进行分隔，但它并不会产生任何动作。
然而你可以给它添加样式或视觉特效，甚至可以为它增加动画效果。默认情况下Separator是横向的。你可以通过setOrientation方法来改变其方向。
Separator类是Node类的一个扩展。因此，Separator继承了Node类的所有属性。
你也可以在程序中设置Separator的默认长度（对于横向的Separator来说是宽度，而对于纵向的Separator来说是高度），它可以在用户界面改变大小时随之动态改变。
另外你还可以使用对Separator对象可用的CSS样式类来改变其外观。

$HTML Editor
HTMLEditor类采用HTML字符串的形式来表示编辑的内容。例如，图21-1中输入的内容是通过下面的字符串来表示的：
“<html><head></head><body contenteditable=”true”><h1>Heading</h1><div><u>Text</u>, some text</div></body></html>”。
由于HTMLEditor是Node类的扩展，你可以在其实例上应用视觉特效和变换。

$Tooltip
Tooltip类表示一个常见的UI组件，它常用于为其他UI控件显示附加的信息。通过调用setTooltip方法可以将Tooltip设置给任何控件。
因为Tooltip类是Labeled类的一个扩展，你不仅可以添加一个文本标题，还可以添加一个图标。例22-2为Password Field的Tooltip添加了一个图标。

$Titles Pane & Accordion
请不要明确地设置Titled Pane的最小、最大或者首选高度，因为这可能导致其打开或者关闭时出现异常行为。

$Menu
与其他UI控件不一样，Menu类和其他MenuItem的扩展类不是继承自Node类。他们不能直接添加到应用程序scene中，直到通过getMenus()方法添加到菜单栏中时才可见。

$Color Picker
请注意ColorPicker类是ComboBoxBase类的一个扩展类并且继承了它的CSS属性。你可以定义新的combo-box-base样式来统一在ColorPickerSample应用程序中
Combo Box和Color Picker的外观。使用例25-8中所示的样式替换ControlStyle.css文件中的样式。

$Pagination Control
无法直接向Pagination控件中添加任何内容项，因为它需要设置一个页面工厂（Page Factory）。使用Pagination类的setPageFactory方法来实现一个页面工厂，
这样来定义页面的内容。
setPageFactory方法用于为Pagination控件定义Page Factory。应用程序开发者需要创建一个回调方法并设置一个Page Factory来使用这个回调方法。回调方法会
在一个页面被选中时触发。它会加载并返回被选中页面的内容。如果当前被选中的页面索引不存在，则必须返回null值。

$Test
JavaFX程序中的图形内容由许多对象组成，它们都被组织到了一个名为scene graph的树形结构之中。scene graph中的每个元素被称为一个node。node可以处理不同
类型的内容，也包括文本。node可以被变换或者被添加动画效果。你也可以为node应用各种各样的特效。使用各种node类型所共有的特性可以让你提供复杂的文本内容，
它们可以满足现代富互联网应用（Rich Internet Application，RIA）的需要。
JavaFX的SDK提供了javafx.scene.text.Text类，它被用来显示文本。Text类继承自Node类，因此你可以对Text应用特效、动画和变形，就像对其它各种node一样。
由于Node类继承自Shape类，所以你可以像给其他任何shape一样为Text设置笔画或者填充模式。
